// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

var majorScale = /* array */[
  /* Whole */0,
  /* Whole */0,
  /* Half */1,
  /* Whole */0,
  /* Whole */0,
  /* Whole */0,
  /* Half */1
];

function generateTranspose(majorScaleOffset) {
  var result = Caml_array.caml_make_vect(majorScale.length + 1 | 0, 0);
  for(var i = 1 ,i_finish = majorScale.length - 1 | 0; i <= i_finish; ++i){
    var value = Caml_array.caml_array_get(majorScale, Caml_int32.mod_(i + majorScaleOffset | 0, majorScale.length));
    var increment = value ? 1 : 2;
    Caml_array.caml_array_set(result, i + 1 | 0, Caml_array.caml_array_get(result, i) + increment | 0);
  }
  return result;
}

var transposeChromatic = /* array */[
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11
];

var transposeMajor = generateTranspose(0);

var transposeDorian = generateTranspose(1);

var transposePhrygian = generateTranspose(2);

var transposeLydian = generateTranspose(3);

var transposeMixolydian = generateTranspose(4);

var transposeMinor = generateTranspose(5);

var transposeLocrian = generateTranspose(6);

function getScale(t) {
  switch (t) {
    case 0 : 
        return transposeChromatic;
    case 1 : 
        return transposeMajor;
    case 2 : 
        return transposeDorian;
    case 3 : 
        return transposePhrygian;
    case 4 : 
        return transposeLydian;
    case 5 : 
        return transposeMixolydian;
    case 6 : 
        return transposeMinor;
    case 7 : 
        return transposeLocrian;
    
  }
}

function getScaleValue(note, t) {
  var array = getScale(t);
  return Caml_array.caml_array_get(array, Caml_int32.mod_(note, array.length));
}

exports.getScaleValue = getScaleValue;
/* transposeMajor Not a pure module */
