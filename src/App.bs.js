// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Row$ReactTemplate = require("./Row.bs.js");
var Lane$ReactTemplate = require("./Lane.bs.js");
var WebAudio$ReactTemplate = require("./WebAudio.bs.js");

var component = ReasonReact.reducerComponent("App");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return WebAudio$ReactTemplate.createSchedule((function (_, _$1) {
                            return Curry._1(self[/* send */3], /* Playback */0);
                          }));
            }),
          /* didUpdate */(function (param) {
              if (param[/* oldSelf */0][/* state */1][/* isPlaying */2] !== param[/* newSelf */1][/* state */1][/* isPlaying */2]) {
                console.log("is has changed - change schedule");
                return /* () */0;
              } else {
                return 0;
              }
            }),
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* isPlaying */2];
              return React.createElement("div", undefined, React.createElement("button", {
                              onClick: (function () {
                                  return Curry._1(self[/* send */3], /* SetPlayback */Block.__(1, [!self[/* state */1][/* isPlaying */2]]));
                                })
                            }, match ? "Playing" : "Stopped"), ReasonReact.element(/* None */0, /* None */0, Row$ReactTemplate.make("Octave", self[/* state */1][/* octave */0], (function (index, value) {
                                    return Curry._1(self[/* send */3], /* SetLaneValue */Block.__(2, [/* record */[
                                                    /* laneValue : Octave */0,
                                                    /* index */index,
                                                    /* value */value
                                                  ]]));
                                  }), (function (index) {
                                    return Curry._1(self[/* send */3], /* SetLength */Block.__(0, [
                                                  /* Octave */0,
                                                  index
                                                ]));
                                  }), /* array */[])), ReasonReact.element(/* None */0, /* None */0, Row$ReactTemplate.make("Transpose", self[/* state */1][/* transpose */1], (function (index, value) {
                                    return Curry._1(self[/* send */3], /* SetLaneValue */Block.__(2, [/* record */[
                                                    /* laneValue : Transpose */1,
                                                    /* index */index,
                                                    /* value */value
                                                  ]]));
                                  }), (function (index) {
                                    return Curry._1(self[/* send */3], /* SetLength */Block.__(0, [
                                                  /* Transpose */1,
                                                  index
                                                ]));
                                  }), /* array */[])));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* octave */Lane$ReactTemplate.emptyLane(/* () */0),
                      /* transpose */Lane$ReactTemplate.emptyLane(/* () */0),
                      /* isPlaying */false
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                var octave = Caml_array.caml_array_get(self[/* state */1][/* octave */0][/* values */0], self[/* state */1][/* octave */0][/* index */1]);
                                var transpose = Caml_array.caml_array_get(self[/* state */1][/* transpose */1][/* values */0], self[/* state */1][/* transpose */1][/* index */1]);
                                var note = Caml_int32.imul(octave, 12) + transpose | 0;
                                console.log(note);
                                return Curry._1(self[/* send */3], /* AdvancePlayback */1);
                              })]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* octave */Lane$ReactTemplate.advance(state[/* octave */0]),
                              /* transpose */Lane$ReactTemplate.advance(state[/* transpose */1]),
                              /* isPlaying */state[/* isPlaying */2]
                            ]]);
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var index = action[1];
                      if (action[0]) {
                        var init = state[/* transpose */1];
                        return /* Update */Block.__(0, [/* record */[
                                    /* octave */state[/* octave */0],
                                    /* transpose : record */[
                                      /* values */init[/* values */0],
                                      /* index */init[/* index */1],
                                      /* length */index
                                    ],
                                    /* isPlaying */state[/* isPlaying */2]
                                  ]]);
                      } else {
                        var init$1 = state[/* octave */0];
                        return /* Update */Block.__(0, [/* record */[
                                    /* octave : record */[
                                      /* values */init$1[/* values */0],
                                      /* index */init$1[/* index */1],
                                      /* length */index
                                    ],
                                    /* transpose */state[/* transpose */1],
                                    /* isPlaying */state[/* isPlaying */2]
                                  ]]);
                      }
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* octave */state[/* octave */0],
                                  /* transpose */state[/* transpose */1],
                                  /* isPlaying */action[0]
                                ]]);
                  case 2 : 
                      var laneEdit = action[0];
                      var match = laneEdit[/* laneValue */0];
                      if (match) {
                        Caml_array.caml_array_set(state[/* transpose */1][/* values */0], laneEdit[/* index */1], laneEdit[/* value */2]);
                      } else {
                        Caml_array.caml_array_set(state[/* octave */0][/* values */0], laneEdit[/* index */1], laneEdit[/* value */2]);
                      }
                      return /* Update */Block.__(0, [state]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
